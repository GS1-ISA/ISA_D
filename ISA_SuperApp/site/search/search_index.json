{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ISA SuperDesign","text":"<p>Last updated: 2025-09-02</p> <p>Welcome to the Intelligent Standards Assistant documentation. This site covers setup, usage, development, data ingestion, agents, and ops.</p>"},{"location":"PROJECT_MEMORY/","title":"Project Memory (Curated)","text":"<p>Last updated: 2025-09-02</p>"},{"location":"PROJECT_MEMORY/#vision-long-term","title":"Vision (Long-term)","text":"<ul> <li>ISA as autonomous, standards-aware assistant for GS1 NL.</li> </ul>"},{"location":"PROJECT_MEMORY/#principles","title":"Principles","text":"<ul> <li>Plan \u2192 Act \u2192 Verify \u2192 Document \u2192 Commit.</li> <li>No secrets in VCS. Deterministic builds.</li> </ul>"},{"location":"PROJECT_MEMORY/#decisions-chronological","title":"Decisions (Chronological)","text":"<ul> <li>2025-08-20: Gemini orchestrator loop adopted. Tokens generated at build/run into webui/tokens.css.</li> <li>2025-08-20: PYTHONPATH set for all subprocesses from api_server.</li> </ul>"},{"location":"PROJECT_MEMORY/#open-risks","title":"Open Risks","text":"<ul> <li>Codesigning for macOS distribution pending Developer ID.</li> <li>STUB mode when keys absent\u2014communicate clearly in UI/logs.</li> </ul>"},{"location":"PROJECT_MEMORY/#next-milestones","title":"Next Milestones","text":"<ul> <li>Expand smoke tests to exercise API routes and DB integrations.</li> <li>CI matrix (macOS arm64/x64 + universal DMG).</li> </ul>"},{"location":"ci_secrets/","title":"Ci secrets","text":"<p>Last updated: 2025-09-02 CI Secrets &amp; macOS signing (GitHub Actions)</p> <p>This file lists the exact environment variable / secret names expected by the project's CI when you want to enable macOS code signing and notarization.</p> <p>Principles - Keep all secrets out of source control. Store them in GitHub repository Secrets. - Prefer base64-encoding binary files (p12 / p8) when placing them into GitHub   Secrets to avoid newline/encoding issues. - Use the <code>SKIP_SIGNING</code> CI env var to avoid signing in CI when you don't have   signing credentials available.</p> <p>Recommended secret names - SKIP_SIGNING (string: \"true\" or \"false\") \u2014 CI toggle; default workflow sets true.</p> <p>Signing certificate (p12) - MACOS_SIGNING_P12 (base64) \u2014 the macOS Developer ID Application certificate exported as a .p12 file then base64-encoded. - MACOS_SIGNING_P12_PASSWORD \u2014 password used when exporting the .p12 file. - MACOS_SIGNING_KEYCHAIN_PASSWORD \u2014 password for a temporary keychain created during CI (you can generate one per-run). - TEAM_ID \u2014 your Apple Developer Team ID (used by some electron-builder configs).</p> <p>Notarization (recommended: API key approach) - APPLE_API_KEY_ID \u2014 the Key ID from App Store Connect (e.g. 'ABC123DEFG'). - APPLE_API_ISSUER_ID \u2014 the Issuer ID (GUID) for the API key in App Store Connect. - APPLE_API_PRIVATE_KEY (base64) \u2014 the private key (.p8) file content base64-encoded.</p> <p>Alternative (legacy) notarization using Apple ID app-specific password - APPLE_ID \u2014 Apple ID email used for notarization (less recommended in CI). - APPLE_APP_PASSWORD \u2014 an app-specific password for the Apple ID (if not using API keys).</p> <p>Other runtime secrets (keep in <code>.env</code> or Actions secrets as needed) - OPENROUTER_API_KEY, ISA_API_KEY_OPENROUTER, OPENAI_API_KEY - SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_KEY - NEO4J_URI, NEO4J_USERNAME, NEO4J_PASSWORD</p> <p>Example: how to store binaries safely - Locally: base64 encode before copying to GitHub Secrets   <code>bash   base64 signing.p12 | pbcopy  # paste into GitHub secret value for MACOS_SIGNING_P12   base64 AuthKey_ABCDEF1234.p8 | pbcopy  # paste into APPLE_API_PRIVATE_KEY</code></p> <p>Example GitHub Actions snippet: install p12 into a temporary keychain</p> <pre><code>- name: Prepare macOS signing keychain\n  if: env.SKIP_SIGNING != 'true'\n  env:\n    P12_BASE64: ${{ secrets.MACOS_SIGNING_P12 }}\n    P12_PASSWORD: ${{ secrets.MACOS_SIGNING_P12_PASSWORD }}\n    KEYCHAIN_PASSWORD: ${{ secrets.MACOS_SIGNING_KEYCHAIN_PASSWORD }}\n  run: |\n    set -euo pipefail\n    echo \"$P12_BASE64\" | base64 --decode &gt; signing.p12\n    KEYCHAIN=build.keychain\n    security create-keychain -p \"$KEYCHAIN_PASSWORD\" \"$KEYCHAIN\"\n    security import signing.p12 -k \"$KEYCHAIN\" -P \"$P12_PASSWORD\" -T /usr/bin/codesign || true\n    security list-keychains -s \"$KEYCHAIN\" $(security list-keychains | sed -n 's/^\\s*\"\\(.*\\)\"$/\\1/p')\n    # Allow codesign and other tools to access the key\n    security set-key-partition-list -S apple: -s -k \"$KEYCHAIN_PASSWORD\" \"$KEYCHAIN\" || true\n    echo \"Keychain prepared\"\n\n# Remember to cleanup in a later step (delete the keychain):\n- name: Cleanup signing keychain\n  if: env.SKIP_SIGNING != 'true'\n  run: |\n    security delete-keychain build.keychain || true\n</code></pre> <p>Example GitHub Actions snippet: write Apple notary API key file from secret</p> <pre><code>- name: Prepare Apple notary API key\n  if: env.SKIP_SIGNING != 'true'\n  env:\n    APPLE_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}\n    APPLE_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}\n    APPLE_PRIVATE_KEY_BASE64: ${{ secrets.APPLE_API_PRIVATE_KEY }}\n  run: |\n    set -euo pipefail\n    echo \"$APPLE_PRIVATE_KEY_BASE64\" | base64 --decode &gt; AuthKey_${APPLE_KEY_ID}.p8\n    # You can now use xcrun notarytool with --key/--issuer or set NOTARYTOOL_KEY chain\n    ls -l AuthKey_${APPLE_KEY_ID}.p8\n</code></pre> <p>Example: using notarytool to submit an artifact</p> <pre><code>- name: Notarize app\n  if: env.SKIP_SIGNING != 'true'\n  env:\n    APPLE_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}\n    APPLE_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}\n  run: |\n    # Example: notarize the zip/dmg produced by electron-builder\n    xcrun notarytool submit ./dist/YourApp.dmg --key AuthKey_${APPLE_KEY_ID}.p8 --key-id ${APPLE_KEY_ID} --issuer ${APPLE_ISSUER_ID} --wait\n    xcrun stapler staple ./dist/YourApp.dmg\n</code></pre> <p>Notes and tips - Keep <code>SKIP_SIGNING=true</code> in CI until you have configured secrets and verified their correctness. - Use base64-encoded secrets to avoid accidental truncation or newline issues when storing in GitHub Secrets. - Test the signing/notarization steps locally first before enabling them in CI; for local testing you can import the p12 into your Keychain manually and run the same <code>xcrun notarytool</code> commands. - For high-security workflows, rotate signing keys regularly and limit access to the GitHub secrets.</p> <p>If you'd like, I can now: (A) update the CI workflow to install the p12 and notary key only when SKIP_SIGNING=false (conditional steps) \u2014 or (B) create a <code>docs/ci_secrets_example.md</code> with copy-paste-ready GitHub Actions workflow snippets. Which next?</p>"},{"location":"config/","title":"Configuration","text":"<p>Last updated: 2025-09-02</p> <p>Settings are provided via <code>.env</code> (copy from <code>.env.example</code>). Never commit secrets. Key variables: - <code>OPENROUTER_API_KEY</code> / <code>ISA_API_KEY_OPENROUTER</code> - <code>FIGMA_ACCESS_TOKEN</code> - <code>SUPABASE_URL</code>, <code>SUPABASE_ANON_KEY</code> - <code>NEO4J_URI</code>, <code>NEO4J_USERNAME</code>, <code>NEO4J_PASSWORD</code> - <code>ISA_AUTH_SECRET</code>, users and passwords for admin/user roles.</p>"},{"location":"development_practices/","title":"Development practices","text":"<p>Last updated: 2025-09-02 Development Practices</p> <p>Keep the repository clean and reproducible. Follow these rules:</p> <ul> <li>Always create a <code>.venv</code> for local development and use it to run tests.</li> <li>Prefer <code>pip install -e .</code> during development so tests import the package naturally.</li> <li>Keep a <code>logs/</code> folder for important install/build logs (ignored by git if contains secrets).</li> <li>After any change that affects runtime behaviour, update or add tests that cover the change.</li> <li>Update <code>DEV_SETUP.md</code> and <code>README.md</code> when setup steps change.</li> <li>Keep CI green: add a GitHub Actions workflow that installs deps, runs tests, and builds artifacts.</li> <li>Keep a small audit log of actions (install/build/test) in <code>logs/</code>.</li> </ul> <p>Cleanup - Use <code>scripts/cleanup_logs_and_builds.sh</code> to prune <code>logs/</code>, electron <code>dist/</code>, and <code>node_modules</code> when you need to reclaim space or reset local build artifacts.</p>"},{"location":"documents-and-chat/","title":"Documents &amp; Chat","text":"<p>Last updated: 2025-09-02</p> <p>Documents are created via <code>/doc/generate</code>. Chat answers can include trace and importance scores when <code>explain=true</code>. Feedback (\ud83d\udc4d/\ud83d\udc4e/comments) is saved for tuning.</p>"},{"location":"graph-explorer/","title":"Graph Explorer","text":"<p>Last updated: 2025-09-02</p> <p><code>/ui/graph</code> displays entities and relations with a force layout. Use the filter input to locate nodes quickly.</p>"},{"location":"install/","title":"Installation (macOS)","text":"<p>Last updated: 2025-09-02</p>"},{"location":"install/#prereqs","title":"Prereqs","text":"<ul> <li>macOS 14+ (Apple Silicon)</li> <li>Xcode CLT: <code>xcode-select --install</code></li> <li>Homebrew (optional)</li> <li>Python 3.11+</li> <li>Node 20+ and npm</li> </ul>"},{"location":"install/#steps","title":"Steps","text":"<pre><code>make setup      # creates .venv + installs Python deps\nmake test       # runs unit + smoke tests\nmake run        # starts API at http://127.0.0.1:8787\n</code></pre>"},{"location":"install/#desktop-app-dmg","title":"Desktop App (DMG)","text":"<pre><code>cd desktop/electron\nnpm install\nnpx electron-builder --mac dmg\nopen dist/*.dmg\n</code></pre>"},{"location":"install/#universal-arm64x64-build","title":"Universal (arm64+x64) build","text":"<pre><code>cd desktop/electron\nnpm install\nnpx electron-builder --mac universal\nopen dist/*.dmg\n</code></pre>"},{"location":"install/#configuration","title":"Configuration","text":""},{"location":"install/#llm-provider","title":"LLM Provider","text":"<p>By default, the application uses OpenRouter as the LLM provider. You can also configure it to use OpenAI's models.</p> <p>To use OpenAI, you will need an OpenAI API key. You can get one from platform.openai.com.</p> <p>Once you have your API key, you can use the <code>scripts/setup_openai.sh</code> script to configure the application to use it:</p> <pre><code>./scripts/setup_openai.sh\n</code></pre> <p>This will create a <code>.env</code> file in the project root with your API key and set the <code>ISA_LLM_PROVIDER</code> to <code>openai</code>.</p> <p>If you want to switch back to OpenRouter, you can either delete the <code>.env</code> file or change the <code>ISA_LLM_PROVIDER</code> to <code>openrouter</code>.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Last updated: 2025-09-02</p> <pre><code>git clone &lt;repo&gt;\ncd &lt;repo&gt;\nmake setup\nmake run\n# open http://127.0.0.1:8787/ui/users\n</code></pre>"},{"location":"roadmap/","title":"Project Roadmap &amp; Future Plans","text":"<p>Last updated: 2025-09-02</p> <p>This document outlines future improvements and tasks identified during project audits and development.</p>"},{"location":"roadmap/#audit-findings-remaining-recommendations","title":"Audit Findings - Remaining Recommendations","text":""},{"location":"roadmap/#1-implement-tokenscss-generation","title":"1. Implement <code>tokens.css</code> Generation","text":"<ul> <li>Description: The <code>tokens.css</code> file is currently empty, resolving a 404 error, but it is intended to contain design tokens (e.g., from Figma). A process needs to be established to generate and populate this file with actual styling information.</li> <li>Priority: Medium</li> <li>Details: This task requires investigation into the project's design system workflow and integration with tools that can export design tokens to CSS.</li> </ul>"},{"location":"roadmap/#2-research-and-integrate-best-practices-for-python-subprocess-management","title":"2. Research and Integrate Best Practices for Python Subprocess Management","text":"<ul> <li>Description: While immediate Python path issues for <code>subprocess.run</code> calls have been addressed, a broader review of best practices for managing Python subprocesses (including <code>PYTHONPATH</code>, environment variables, and error handling) is recommended. This ensures long-term robustness and maintainability.</li> <li>Priority: Medium</li> <li>Details: This involves researching industry best practices, potentially exploring alternative subprocess management techniques, and updating relevant project documentation (e.g., <code>GEMINI.md</code>, <code>development_practices.md</code>).</li> </ul>"},{"location":"roadmap/#3-general-review-and-refactoring-of-subprocessrun-calls","title":"3. General Review and Refactoring of <code>subprocess.run</code> Calls","text":"<ul> <li>Description: An ongoing task to continuously review any new or existing <code>subprocess.run</code> calls within the codebase. The goal is to ensure they adhere to best practices, handle <code>PYTHONPATH</code> and other environment variables correctly, and consider alternatives where direct Python function calls are more appropriate and efficient.</li> <li>Priority: Ongoing / Low (for new instances)</li> <li>Details: This is a continuous code quality effort that should be integrated into development workflows and code reviews.</li> </ul>"},{"location":"user-guide/","title":"Using the Web UI","text":"<p>Last updated: 2025-09-02</p> <ul> <li>Chat: Ask questions; use streaming for long answers.</li> <li>Document Generator: Draft ESG and standards documents; download markdown.</li> <li>Memory Browser: Inspect knowledge graph entities.</li> <li>ESG Lookup: Search vector index for relevant snippets.</li> <li>Simulation: Run scenario adjustments to RAG scores.</li> <li>Projects: Track notes and work items.</li> </ul>"},{"location":"agents/AGENTS/","title":"AGENTS \u2014 Automation &amp; Copilots","text":"<p>Last updated: 2025-09-02</p> <p>Guardrails: - Keep <code>mkdocs.yml</code> nav synchronized with <code>docs/</code>. - Maintain API contracts; update tests for any change. - Never commit secrets.</p> <p>Allowed Tasks: - Add/extend tests; improve coverage. - Update docs sections with accurate endpoints/workflows. - Small, reversible changes for retrieval/reasoning quality.</p>"},{"location":"agents/GEMINI/","title":"GEMINI CLI \u2014 Agent Instructions","text":"<p>Last updated: 2025-09-02</p> <p>Objectives: - Keep documentation accurate and navigable. - Parse FastAPI to refresh <code>docs/dev/api.md</code>. - Ensure <code>pytest -q</code> passes on macOS and Windows.</p> <p>Steps: 1. Generate repo manifest (paths/languages). 2. Run tests: <code>./scripts/test_all.sh</code> or <code>scripts\\win\\test_all.ps1</code>. 3. Propose minimal diffs; include tests &amp; docs.</p>"},{"location":"agents/MEMORY_ARCHITECTURE/","title":"ISA Memory Architecture \u2014 Modular, Multi-Backend, CI-Gated","text":"<p>Last updated: 2025-09-02</p> <p>Overview: Multi-backend memory system combining buffer/summary/vector, structured facts, temporal KG, and adapters to external tools. All memory writes are logged for audits; CI includes coherence and determinism checks.</p> <p>See repository-level doc for full details: ../../../../docs/agents/MEMORY_ARCHITECTURE.md</p>"},{"location":"agents/maintenance_playbook/","title":"Maintenance Playbook","text":"<p>Last updated: 2025-09-02</p> <p>Ownership: - <code>src/</code> \u2014 backend APIs - <code>webui/</code> \u2014 static UI - <code>desktop/electron/</code> \u2014 packaging only - <code>tests/</code> \u2014 deterministic tests - <code>docs/</code> \u2014 MkDocs site</p> <p>Versioning: SemVer</p> <p>PR Template: - Purpose - Changes - Tests - Docs</p>"},{"location":"data/retrieval/","title":"Retrieval","text":"<p>Last updated: 2025-09-02</p> <p>Default: lexical TF-IDF index. Optional: sentence-transformers embeddings if installed.</p>"},{"location":"data/scheduler/","title":"Scheduler","text":"<p>Last updated: 2025-09-02</p> <p>Run:</p> <pre><code>python -m src.scheduler --interval-min 360\n</code></pre>"},{"location":"data/sources/","title":"Data Sources","text":"<p>Last updated: 2025-09-02</p> <ul> <li>GS1: https://www.gs1.org/standards/log</li> <li>EFRAG: news (placeholder in offline mode)</li> <li>EUR-Lex: ESG queries (placeholder in offline mode)</li> <li>GitHub: https://github.com/gs1 (optional via token)</li> </ul> <p>Ingest updates memory entities; rebuild vector index after ingest.</p>"},{"location":"dev/api/","title":"API","text":"<p>Last updated: 2025-09-02</p>"},{"location":"dev/api/#endpoints","title":"Endpoints","text":"<ul> <li><code>POST /ask</code> \u2014 {question, explain?} \u2192 {answer, trace?, importance?}</li> <li><code>POST /ask_stream</code> \u2014 JSONL chunks for streaming</li> <li><code>POST /doc/generate</code> \u2014 {title, outline?} \u2192 {markdown, download}</li> <li><code>GET /memory?query=...</code> \u2014 list memory items</li> <li><code>POST /search</code> \u2014 vector/lexical search results</li> <li>Admin: <code>/admin/verify</code>, <code>/admin/ingest</code>, <code>/admin/reindex</code></li> <li>Auth: <code>/auth/login</code>, <code>/auth/logout</code>, <code>/auth/me</code></li> <li>Projects: <code>/projects</code> GET/POST</li> <li>Metrics: <code>/metrics</code></li> </ul>"},{"location":"dev/architecture/","title":"Architecture","text":"<p>Last updated: 2025-09-02</p> <ul> <li>FastAPI backend (<code>src/</code>): orchestrator, memory, retrieval, reasoning.</li> <li>Static web UI (<code>webui/</code>): HTML/CSS/JS, streaming chat.</li> <li>Pipelines: ingest GS1/EFRAG/EUR-Lex; scheduler to refresh data.</li> <li>Electron wrapper (<code>desktop/electron/</code>): DMG (macOS), NSIS (Windows).</li> <li>Tests (<code>tests/</code>): unit, integration, system.</li> <li>Docs (<code>docs/</code> + <code>mkdocs.yml</code>): local MkDocs site.</li> </ul>"},{"location":"dev/memory/","title":"Memory & Context \u2014 Router, Adapters, and Coherence","text":"<p>Last updated: 2025-09-02</p> <p>Overview - ISA uses a modular memory stack: short-term buffer, vector/KG long-term, and structured facts. - A Memory Router detects context type (short/long/structured) and builds enriched context from KG + vector + adapters. - All memory writes/reads are logged to JSONL for audits.</p> <p>Key Components - Router: <code>src/memory/router.py</code> \u2014 detect, route, build context. - Adapters: <code>src/memory/adapters/*</code> \u2014 LangChain buffer (optional), structured facts, external stubs (Zep, MemEngine, A\u2011MEM, AWS, MCP). - Logs: <code>src/memory/logs.py</code> \u2014 append-only JSONL (<code>agent/memory/memory_log.jsonl</code>). - Drift: <code>src/memory/drift.py</code> \u2014 advisory drift check (cosine over tokens). - Nap-time: <code>src/memory/background.py</code> \u2014 summarize recent events into long-term KG after idle windows.</p> <p>Configuration - <code>ISA_MEMORY_ADAPTERS</code>: comma-separated list to enable (default: <code>langchain,structured,memengine,zep,amem,aws,mcp</code>). - <code>ISA_SLEEPTIME_MINUTES</code>: idle window for nap-time learning (default: 30). - <code>ISA_MEMORY_FILE</code>: path to KG persistence (default: <code>./memory.json</code>).</p> <p>CI Integration - <code>ci.yml</code> runs an advisory memory coherence gate and uploads a memory log snapshot to <code>docs/audit/memory_logs_snapshot.jsonl</code>. - Promotion criteria are described in root <code>docs/CI_WORKFLOWS.md</code>.</p> <p>References - Memory Architecture (site): <code>agents/MEMORY_ARCHITECTURE.md</code> (diagram and policies).</p>"},{"location":"dev/packaging/","title":"Packaging (Desktop)","text":"<p>Last updated: 2025-09-02</p> <p>Electron Builder targets: - macOS: DMG - Windows: NSIS</p> <p>Commands:</p> <pre><code>cd desktop/electron\nnpm install\nnpm run dev\nnpm run dist\n</code></pre> <p>Electron starts API via scripts: <code>scripts/mac/start_api.sh</code> or <code>scripts/win/start_api.bat</code> then loads <code>http://127.0.0.1:8787/ui/users</code>.</p>"},{"location":"dev/structure/","title":"Directory Structure","text":"<p>Last updated: 2025-09-02</p> <p>Ownership boundaries: - <code>src/</code> \u2014 API and logic \u2014 stable contracts; changes require tests. - <code>webui/</code> \u2014 static bundle \u2014 add features minimally. - <code>desktop/electron/</code> \u2014 packaging \u2014 keep API startup via scripts. - <code>tests/</code> \u2014 pytest \u2014 expand coverage, keep deterministic. - <code>docs/</code> \u2014 MkDocs \u2014 keep nav consistent with files.</p>"},{"location":"dev/style/","title":"Style &amp; Lint","text":"<p>Last updated: 2025-09-02</p> <ul> <li>Python: black/ruff recommended.</li> <li>JS: Prettier recommended.</li> <li>Docs: imperative voice; short sentences; avoid duplication.</li> </ul>"},{"location":"dev/testing/","title":"Testing","text":"<p>Last updated: 2025-09-02</p> <p>Use <code>pytest</code>:</p> <pre><code>pytest -q\n</code></pre> <ul> <li>Set <code>ISA_TEST_MODE=1</code> to bypass rate-limits/external calls.</li> <li>Avoid hard-coded paths; use <code>pathlib</code>.</li> <li>Coverage: <code>pytest --cov=src --cov-report=term-missing</code>.</li> </ul> <p>Structure: - <code>tests/unit/*</code> \u2014 pure units - <code>tests/integration/*</code> \u2014 FastAPI TestClient calls - <code>tests/system/*</code> \u2014 ingest/reindex flows, desktop smoke</p>"},{"location":"dev/workflows/","title":"Workflows","text":"<p>Last updated: 2025-09-02</p> <ul> <li>Ingest: Admin -&gt; Run Ingest -&gt; Reindex -&gt; Verify search results.</li> <li>Document Drafting: Provide title+outline -&gt; refine -&gt; download.</li> <li>Feedback Loop: Reactions and comments saved to <code>artifacts/feedback.jsonl</code>.</li> <li>Scheduler: <code>python -m src.scheduler --interval-min 360</code>.</li> </ul>"},{"location":"ops/metrics/","title":"Metrics &amp; Monitoring","text":"<p>Last updated: 2025-09-02</p> <ul> <li><code>/metrics</code> endpoint exposes counters &amp; gauges.</li> <li>Extend with histograms and structured logs for production.</li> </ul>"},{"location":"ops/metrics/#opentelemetry-optional-tracing","title":"OpenTelemetry (Optional Tracing)","text":"<ul> <li>Enable by setting <code>OTEL_ENABLED=1</code> in the environment.</li> <li>Configure exporter endpoint with <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> (default <code>http://127.0.0.1:4318</code>).</li> <li>The server auto-instruments FastAPI and outgoing requests when enabled; spans are exported via OTLP/HTTP.</li> <li>Logs include <code>trace_id</code> and <code>span_id</code> fields when OpenTelemetry is present.</li> </ul>"},{"location":"ops/metrics/#one-command-tracing-jaeger","title":"One-command tracing (Jaeger)","text":"<ul> <li>Start local Jaeger with OTLP receiver:</li> </ul> <pre><code>docker compose -f infra/otel/docker-compose.yml up -d\n</code></pre> <ul> <li>Enable tracing in a separate shell and run the API:</li> </ul> <pre><code>export OTEL_ENABLED=1\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://127.0.0.1:4318\nmake api\n</code></pre> <ul> <li> <p>Open Jaeger UI: http://127.0.0.1:16686 and search for <code>service.name = ISA_SuperApp</code>.</p> </li> <li> <p>Stop Jaeger:</p> </li> </ul> <pre><code>docker compose -f infra/otel/docker-compose.yml down\n</code></pre>"},{"location":"ops/security/","title":"Security Notes","text":"<p>Last updated: 2025-09-02</p> <ul> <li>Do not commit secrets; use <code>.env</code>.</li> <li>HTTP-only cookies and JWT for admin routes.</li> <li>Optional CSP headers if serving UI externally.</li> <li>Rotate API keys periodically.</li> </ul>"}]}